# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import producto_pb2 as producto__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in producto_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ProductoServiceStub(object):
    """Servicio para gestionar productos
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListarProductos = channel.unary_unary(
                '/producto.ProductoService/ListarProductos',
                request_serializer=producto__pb2.ListarProductosRequest.SerializeToString,
                response_deserializer=producto__pb2.ListarProductosResponse.FromString,
                _registered_method=True)
        self.CrearProducto = channel.unary_unary(
                '/producto.ProductoService/CrearProducto',
                request_serializer=producto__pb2.CrearProductoRequest.SerializeToString,
                response_deserializer=producto__pb2.CrearProductoResponse.FromString,
                _registered_method=True)
        self.ObtenerProducto = channel.unary_unary(
                '/producto.ProductoService/ObtenerProducto',
                request_serializer=producto__pb2.ObtenerProductoRequest.SerializeToString,
                response_deserializer=producto__pb2.ObtenerProductoResponse.FromString,
                _registered_method=True)
        self.ActualizarProducto = channel.unary_unary(
                '/producto.ProductoService/ActualizarProducto',
                request_serializer=producto__pb2.ActualizarProductoRequest.SerializeToString,
                response_deserializer=producto__pb2.ActualizarProductoResponse.FromString,
                _registered_method=True)
        self.EliminarProducto = channel.unary_unary(
                '/producto.ProductoService/EliminarProducto',
                request_serializer=producto__pb2.EliminarProductoRequest.SerializeToString,
                response_deserializer=producto__pb2.EliminarProductoResponse.FromString,
                _registered_method=True)
        self.BuscarProductos = channel.unary_unary(
                '/producto.ProductoService/BuscarProductos',
                request_serializer=producto__pb2.BuscarProductosRequest.SerializeToString,
                response_deserializer=producto__pb2.BuscarProductosResponse.FromString,
                _registered_method=True)
        self.ProductosPorSucursal = channel.unary_unary(
                '/producto.ProductoService/ProductosPorSucursal',
                request_serializer=producto__pb2.ProductosPorSucursalRequest.SerializeToString,
                response_deserializer=producto__pb2.ProductosPorSucursalResponse.FromString,
                _registered_method=True)
        self.ActualizarStock = channel.unary_unary(
                '/producto.ProductoService/ActualizarStock',
                request_serializer=producto__pb2.ActualizarStockRequest.SerializeToString,
                response_deserializer=producto__pb2.ActualizarStockResponse.FromString,
                _registered_method=True)


class ProductoServiceServicer(object):
    """Servicio para gestionar productos
    """

    def ListarProductos(self, request, context):
        """Listar todos los productos
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CrearProducto(self, request, context):
        """Crear un nuevo producto
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObtenerProducto(self, request, context):
        """Obtener un producto por ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActualizarProducto(self, request, context):
        """Actualizar un producto
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EliminarProducto(self, request, context):
        """Eliminar un producto
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuscarProductos(self, request, context):
        """Buscar productos por nombre
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProductosPorSucursal(self, request, context):
        """Obtener productos por sucursal
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActualizarStock(self, request, context):
        """Actualizar stock de un producto
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListarProductos': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarProductos,
                    request_deserializer=producto__pb2.ListarProductosRequest.FromString,
                    response_serializer=producto__pb2.ListarProductosResponse.SerializeToString,
            ),
            'CrearProducto': grpc.unary_unary_rpc_method_handler(
                    servicer.CrearProducto,
                    request_deserializer=producto__pb2.CrearProductoRequest.FromString,
                    response_serializer=producto__pb2.CrearProductoResponse.SerializeToString,
            ),
            'ObtenerProducto': grpc.unary_unary_rpc_method_handler(
                    servicer.ObtenerProducto,
                    request_deserializer=producto__pb2.ObtenerProductoRequest.FromString,
                    response_serializer=producto__pb2.ObtenerProductoResponse.SerializeToString,
            ),
            'ActualizarProducto': grpc.unary_unary_rpc_method_handler(
                    servicer.ActualizarProducto,
                    request_deserializer=producto__pb2.ActualizarProductoRequest.FromString,
                    response_serializer=producto__pb2.ActualizarProductoResponse.SerializeToString,
            ),
            'EliminarProducto': grpc.unary_unary_rpc_method_handler(
                    servicer.EliminarProducto,
                    request_deserializer=producto__pb2.EliminarProductoRequest.FromString,
                    response_serializer=producto__pb2.EliminarProductoResponse.SerializeToString,
            ),
            'BuscarProductos': grpc.unary_unary_rpc_method_handler(
                    servicer.BuscarProductos,
                    request_deserializer=producto__pb2.BuscarProductosRequest.FromString,
                    response_serializer=producto__pb2.BuscarProductosResponse.SerializeToString,
            ),
            'ProductosPorSucursal': grpc.unary_unary_rpc_method_handler(
                    servicer.ProductosPorSucursal,
                    request_deserializer=producto__pb2.ProductosPorSucursalRequest.FromString,
                    response_serializer=producto__pb2.ProductosPorSucursalResponse.SerializeToString,
            ),
            'ActualizarStock': grpc.unary_unary_rpc_method_handler(
                    servicer.ActualizarStock,
                    request_deserializer=producto__pb2.ActualizarStockRequest.FromString,
                    response_serializer=producto__pb2.ActualizarStockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'producto.ProductoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('producto.ProductoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProductoService(object):
    """Servicio para gestionar productos
    """

    @staticmethod
    def ListarProductos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/ListarProductos',
            producto__pb2.ListarProductosRequest.SerializeToString,
            producto__pb2.ListarProductosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CrearProducto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/CrearProducto',
            producto__pb2.CrearProductoRequest.SerializeToString,
            producto__pb2.CrearProductoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObtenerProducto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/ObtenerProducto',
            producto__pb2.ObtenerProductoRequest.SerializeToString,
            producto__pb2.ObtenerProductoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActualizarProducto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/ActualizarProducto',
            producto__pb2.ActualizarProductoRequest.SerializeToString,
            producto__pb2.ActualizarProductoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EliminarProducto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/EliminarProducto',
            producto__pb2.EliminarProductoRequest.SerializeToString,
            producto__pb2.EliminarProductoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BuscarProductos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/BuscarProductos',
            producto__pb2.BuscarProductosRequest.SerializeToString,
            producto__pb2.BuscarProductosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProductosPorSucursal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/ProductosPorSucursal',
            producto__pb2.ProductosPorSucursalRequest.SerializeToString,
            producto__pb2.ProductosPorSucursalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActualizarStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/producto.ProductoService/ActualizarStock',
            producto__pb2.ActualizarStockRequest.SerializeToString,
            producto__pb2.ActualizarStockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
